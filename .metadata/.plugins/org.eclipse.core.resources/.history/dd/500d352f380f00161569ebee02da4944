import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class ClienteCalc {
	static IOperacoesRemote maq1 = null;
	static IOperacoesRemote maq2 = null;
	static IOperacoesRemote maq3 = null;
	static IOperacoesRemote maq4 = null;
	static String[] ip = { "localhost", "localhost", "localhost", "localhost" };
	static String[] maquina = { "maq1", "maq2", "maq3", "maq4" };
	static List<IOperacoesRemote> listServer = new ArrayList<IOperacoesRemote>();

	public static void main(String[] args) throws IOException, NotBoundException {
		Infix infix = new Infix();

		// interface is dealed with like a class!
		if (args.length != 0) {
			System.err.println("\nUsage:\t java ClienteCalc\n");
			System.exit(1);
		} // if()
		try {
			List<Integer> repeat = new ArrayList<Integer>();
			while (repeat.size() < 4) {
				int rand = (int) (0+Math.random()*4);
				if (!repeat.contains(rand)) {
					repeat.add(rand);
				}
			}

			String objmaq1 = "//" + ip[repeat.get(0)] + ":1099/" + maquina[repeat.get(0)];
			System.out.println("Procurando por objeto " + objmaq1);
			maq1 = (IOperacoesRemote) Naming.lookup(objmaq1);// rmiregistry must
																// be running!

			String objmaq2 = "//" + ip[repeat.get(1)] + ":1099/" + maquina[repeat.get(1)];
			System.out.println("Procurando por objeto " + objmaq2);
			maq2 = (IOperacoesRemote) Naming.lookup(objmaq2);// rmiregistry must
																// be running!

			String objmaq3 = "//" + ip[repeat.get(2)] + ":1099/" + maquina[repeat.get(2)];
			System.out.println("Procurando por objeto " + objmaq3);
			maq3 = (IOperacoesRemote) Naming.lookup(objmaq3);// rmiregistry must
																// be running!

			String objmaq4 = "//" + ip[repeat.get(3)] + ":1099/" + maquina[repeat.get(3)];
			System.out.println("Procurando por objeto " + objmaq4);
			maq4 = (IOperacoesRemote) Naming.lookup(objmaq4);// rmiregistry must
																// be running!

			listServer.add(maq1);
			listServer.add(maq2);
			listServer.add(maq3);
			listServer.add(maq4);

		} // try()
		catch (Exception e)// Seja mais especifico!
		{
			System.err.println("Problemas encontrados! " + e);
			e.printStackTrace();
			System.exit(2);
		} // catch()
		try {
			BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
			String n;// could use a random number...

			System.out.println("digite: ");
			n = in.readLine();

			double resp = 0;

			resp = infix.infix(n);

			System.out.println("Resposta: " + resp + "\n");
			System.out.println("Em: " + System.nanoTime());

		} // try()
		catch (RemoteException re) {
			System.err.println("Problemas na chamada remota! " + re);
			re.printStackTrace();
			System.exit(3);
		} // catch()
	} // main()

	/*
	 * Aqui o cliente vai realizar a chamada pra qual maquina ele deseja enviar
	 * de acordo com sorteio ou s� enviar mesmo
	 */

	public static IOperacoesRemote aleatorio() {
		Random random = new Random(3);
		int rand = random.nextInt(3);

		return listServer.get(rand);
	}

	public static double distribuir(double op1, String operator, double op2)
			throws RemoteException, MalformedURLException, NotBoundException {
		double res = 0;
		/*--------------------------------------- VEI Randomiza aqui
		
		*		Esse c�digo ta s� pra um server
		*		creio que a diferen�a ser� que os servidores(objetos)
		*		vao ser um array de string
		*/

		switch (operator) {
		case "+":
			res = aleatorio().somar(op1, op2);
			break;
		case "-":
			res = aleatorio().subtrair(op1, op2);
			break;
		case "*":
			res = aleatorio().multiplicar(op1, op2);
			break;
		case "/":
			res = aleatorio().dividir(op1, op2);
			break;

		default:
			break;
		}

		return res;

	}
} // ClientWalk
